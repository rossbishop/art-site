type Project @model 
  @auth(
    rules: [ 
        { allow: owner, provider: userPools, ownerField: "owner", operations: [create, update, delete, read] },
        { allow: public, provider: iam, operations: [read] }
      ]
    )
  @key(name: "projectByOwnerByDate", fields: ["owner", "createdAt"], queryField: "projectByOwnerByDate")  
  {
  id: ID!
  projectName: String!
  projectDescription: String!
  owner: ID
  createdAt: AWSDateTime
  revisions: [Revision] @connection(keyName: "revisionByProjectByDate", fields: ["id"])
}

type Revision @model
  @auth(
    rules: [ 
        { allow: owner, provider: userPools, ownerField: "owner", operations: [create, update, delete, read] },
        { allow: public, provider: iam, operations: [read] }
      ]
  ) 
  @key(name: "revisionByProjectByDate", fields: ["projectID", "createdAt"], queryField: "revisionByProjectByDate")
  {
  id: ID!
  projectID: ID!
  imgSrc: String!
  name: String!
  description: String!
  owner: ID
  createdAt: AWSDateTime
  comments: [Comment] @connection(keyName: "commentByRevisionByDate", fields: ["id"])
}

type Comment @model
  @auth(
    rules: [ 
        { allow: owner, provider: userPools, ownerField: "owner", operations: [create, update, delete, read] },
        { allow: public, provider: iam, operations: [read] }
      ]
  )
  @key(name: "commentByRevisionByDate", fields: ["revisionID", "createdAt"], queryField: "commentByRevisionByDate")
  {
    id: ID!
    revisionID: ID!
    comment: String!
    likeCount: Int
    owner: ID
    createdAt: AWSDateTime
    likes: [Like] @connection(keyName: "byUser", fields: ["id"])
}

type Like @model
  @auth(
    rules: [ 
        { allow: owner, provider: userPools, ownerField: "owner", operations: [create, update, delete, read] },
        { allow: public, provider: iam, operations: [read] }
      ]
  )
  @key(name: "byUser", fields: ["commentID", "owner"])
  {
    id: ID!
    commentID: ID!
    owner: ID
}

type PublicUserProfile @model
  @auth(
    rules: [ 
        { allow: owner, provider: userPools, ownerField: "owner", operations: [update, read] },
        { allow: public, provider: iam, operations: [read] }
      ]
  )
  @key(name: "publicUserProfileByUser", fields: ["owner"], queryField: "publicUserProfileByUser")
  {
    id: ID!
    owner: ID
    username: String
    position: String
    location: String
    bio: String
    instagram: String
    twitter: String
    facebook: String
    avatarImg: String
  }