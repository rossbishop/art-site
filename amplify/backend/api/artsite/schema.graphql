type Project @model(timestamps:{createdAt: "createdOn", updatedAt: "updatedOn"}) 
  @auth(
    rules: [ 
        { allow: owner, provider: userPools, ownerField: "owner", operations: [create, update, delete, read] },
        { allow: public, provider: iam, operations: [read] }
      ]
    ) 
  {
  id: ID!
  projectName: String!
  projectDescription: String!
  owner: ID
  revisions: [Revision] @connection(keyName: "byProject", fields: ["id"])
}

type Revision @model(timestamps:{createdAt: "createdOn", updatedAt: "updatedOn"}) 
  @auth(
    rules: [ 
        { allow: owner, provider: userPools, ownerField: "owner", operations: [create, update, delete, read] },
        { allow: public, provider: iam, operations: [read] }
      ]
  ) 
  @key(name: "byProject", fields: ["projectID", "id"]) 
  {
  id: ID!
  projectID: ID!
  imgSrc: String!
  name: String!
  description: String!
  owner: ID
  comments: [Comment] @connection(keyName: "byRevision", fields: ["id"])
}

type Comment @model(timestamps:{createdAt: "createdOn", updatedAt: "updatedOn"})
  @auth(
    rules: [ 
        { allow: owner, provider: userPools, ownerField: "owner", operations: [create, update, delete, read] },
        { allow: public, provider: iam, operations: [read] }
      ]
  )
  @key(name: "byRevision", fields: ["revisionID", "id"])
  {
    id: ID!
    revisionID: ID!
    comment: String!
    likeCount: Int
    owner: ID
    likes: [Like] @connection(keyName: "byUser", fields: ["id"])
}

type Like @model
  @auth(
    rules: [ 
        { allow: owner, provider: userPools, ownerField: "owner", operations: [create, update, delete, read] },
        { allow: public, provider: iam, operations: [read] }
      ]
  )
  @key(name: "byUser", fields: ["commentID", "owner"])
  {
    id: ID!
    commentID: ID!
    owner: ID
}