# type AllProject @model
#   @auth(
#   rules: [ 
#       { allow: owner, provider: userPools, ownerField: "owner" },
#       { allow: public, provider: iam, operations: [read] }
#     ]
#   )
# {
#   allProjectId: ID!

# }

# type Project @model 
#   @auth(
#     rules: [ 
#         { allow: owner, provider: userPools, ownerField: "owner" },
#         { allow: private, provider: userPools, operations: [read]},
#         { allow: public, provider: iam, operations: [read] }
#       ]
#     )
#   @key(fields: ["projectId", "createdAt"])
#   #@key(name: "projectByIdByDate", fields: ["createdAt"], queryField: "projectByIdByDate")
#   @key(name: "projectByOwnerByDate", fields: ["owner"], queryField: "projectByOwnerByDate")
#   # @key(name: "projectByAllProjectByDate", fields: ["allProjectConnId", "createdAt"], queryField: "projectByAllProjectByDate") 
#   {
#   projectId: ID!
#   # allProjectConnId: ID!
#   projectName: String!
#   projectDescription: String!
#   owner: ID
#   createdAt: AWSDateTime!
#   revisions: [Revision] @connection(keyName: "revisionByProjectByDate", fields: ["projectId"])
#     # @auth(rules: [
#     #   { allow: owner, ownerField: "owner"},
#     #   { allow: public, provider: iam, operations: [read]}
#     #   ]
#     # )
# }

type Project @model
  @auth(rules: [
      { allow: owner, provider: userPools },
      { allow: private, provider: userPools, operations: [read] },
      { allow: public, provider: iam, operations: [read] }
      ]
    )
    # get posts by a user ID ordered by date
    @key(name: "projectsByUserByDate", fields: ["owner", "createdAt"], queryField: "projectsByUserByDate")
    # get all posts ordered by date, all items need to have the contentType set to "Project"
    @key(name: "projectsByDate", fields: ["contentType", "createdAt"], queryField: "projectsByDate") 
  {
  id: ID!
  projectName: String!
  projectDescription: String!
  owner: String
  createdAt: String
  contentType: String
  revisions: [Revision] @connection(keyName: "revisionByProjectByDate", fields: ["id"])
    # @auth(rules: [
    #   { allow: owner, ownerField: "owner"},
    #   { allow: public, provider: iam, operations: [read]}
    #   ]
    # )
}

type Revision @model
  @auth(
    rules: [ 
        { allow: owner, provider: userPools },
        { allow: private, provider: userPools, operations: [read]},
        { allow: public, provider: iam, operations: [read] }
      ]
  )
  #@key(fields: ["revisionId"]) 
  @key(name: "revisionByProjectByDate", fields: ["projectID", "createdAt"], queryField: "revisionsByProjectByDate")
  #@key(name: "revisionByProjectByDate", fields: ["contentType", "createdAt"], queryField: "revisionByProjectByDate")
  {
  id: ID!
  projectID: ID!
  imgSrc: String!
  name: String!
  description: String!
  owner: String
  createdAt: String
  contentType: String
  imgFile: S3Object
  comments: [Comment] @connection(keyName: "commentByRevisionByDate", fields: ["id"])
}

type Comment @model
  @auth(
    rules: [ 
        { allow: owner, provider: userPools },
        { allow: private, provider: userPools, operations: [read]},
        { allow: public, provider: iam, operations: [read] }
      ]
  )
  #@key(fields: ["commentId"])
  @key(name: "commentByRevisionByDate", fields: ["revisionID", "createdAt"], queryField: "commentsByRevisionByDate")
  {
    id: ID!
    revisionID: ID!
    comment: String!
    likeCount: Int
    owner: String
    createdAt: String
    #likes: [Like] @connection(keyName: "byUser", fields: ["commentId"])
}

type PublicUserProfile @model
  @auth(
    rules: [ 
        { allow: owner, provider: userPools, ownerField: "owner", operations: [update, read] },
        { allow: private, provider: userPools, operations: [read] },
        { allow: public, provider: iam, operations: [read] }
      ]
  )
  #@key(fields: ["publicUserProfileId"])
  @key(name: "publicUserProfileByUser", fields: ["owner"], queryField: "publicUserProfileByUser")
  {
    #publicUserProfileId: ID!
    id: ID!
    owner: ID
    username: String
    position: String
    location: String
    bio: String
    instagram: String
    twitter: String
    facebook: String
    avatarImgFile: S3Object
    bannerImgFile: S3Object
  }

# type Like @model
#   @auth(
#     rules: [ 
#         { allow: owner, provider: userPools, ownerField: "owner" },
#         { allow: public, provider: iam, operations: [read] }
#       ]
#   )
#   @key(name: "byUser", fields: ["commentConnID", "owner"])
#   {
#     id: ID!
#     commentConnID: ID!
#     owner: ID
# }

type S3Object {
  bucket: String!
  region: String!
  key: String!
}

type PlaceHolder @model
  {
    placeHolderID: ID!
  }