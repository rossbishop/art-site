# type AllProject @model
#   @auth(
#   rules: [ 
#       { allow: owner, provider: userPools, ownerField: "owner" },
#       { allow: public, provider: iam, operations: [read] }
#     ]
#   )
# {
#   allProjectId: ID!

# }

# type Project @model 
#   @auth(
#     rules: [ 
#         { allow: owner, provider: userPools, ownerField: "owner" },
#         { allow: public, provider: iam, operations: [read] }
#       ]
#     )
#   @key(name: "projectByOwnerByDate", fields: ["owner", "createdAt"], queryField: "projectByOwnerByDate")
#   @key(name: "projectByIdByDate", fields: ["projectId", "createdAt"], queryField: "projectByIdByDate")
#   # @key(name: "projectByAllProjectByDate", fields: ["allProjectConnId", "createdAt"], queryField: "projectByAllProjectByDate") 
#   {
#   projectId: ID!
#   # allProjectConnId: ID!
#   projectName: String!
#   projectDescription: String!
#   owner: ID
#   createdAt: AWSDateTime
#   revisions: [Revision] 
#     @connection(keyName: "revisionByProjectByDate", fields: ["projectId"])
#     @auth(rules: [
#       { allow: owner, ownerField: "owner"},
#       { allow: public, provider: iam, operations: [read]}
#       ]
#     )
# }

# type Revision @model
#   @auth(
#     rules: [ 
#         { allow: owner, provider: userPools, ownerField: "owner" },
#         { allow: public, provider: iam, operations: [read] }
#       ]
#   ) 
#   @key(name: "revisionByProjectByDate", fields: ["projectConnID", "createdAt"], queryField: "revisionByProjectByDate")
#   {
#   revisionId: ID!
#   projectConnID: ID!
#   imgSrc: String!
#   name: String!
#   description: String!
#   owner: ID
#   createdAt: AWSDateTime
#   comments: [Comment] @connection(keyName: "commentByRevisionByDate", fields: ["revisionId"])
# }

# type Comment @model
#   @auth(
#     rules: [ 
#         { allow: owner, provider: userPools, ownerField: "owner" },
#         { allow: public, provider: iam, operations: [read] }
#       ]
#   )
#   @key(name: "commentByRevisionByDate", fields: ["revisionConnID", "createdAt"], queryField: "commentByRevisionByDate")
#   {
#     commentId: ID!
#     revisionConnID: ID!
#     comment: String!
#     likeCount: Int
#     owner: ID
#     createdAt: AWSDateTime
#     likes: [Like] @connection(keyName: "byUser", fields: ["commentId"])
# }

# type PublicUserProfile @model
#   @auth(
#     rules: [ 
#         { allow: owner, provider: userPools, ownerField: "owner", operations: [update, read] },
#         { allow: public, provider: iam, operations: [read] }
#       ]
#   )
#   @key(name: "publicUserProfileByUser", fields: ["owner"], queryField: "publicUserProfileByUser")
#   {
#     publicUserProfileId: ID!
#     owner: ID
#     username: String
#     position: String
#     location: String
#     bio: String
#     instagram: String
#     twitter: String
#     facebook: String
#     avatarImg: String
#   }

# type Like @model
#   @auth(
#     rules: [ 
#         { allow: owner, provider: userPools, ownerField: "owner" },
#         { allow: public, provider: iam, operations: [read] }
#       ]
#   )
#   @key(name: "byUser", fields: ["commentConnID", "owner"])
#   {
#     id: ID!
#     commentConnID: ID!
#     owner: ID
# }

type TempModel @model
  {
    id: ID!
  }